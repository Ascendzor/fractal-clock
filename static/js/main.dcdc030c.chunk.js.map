{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","react_default","a","createElement","_useState6","lines","setLines","useEffect","now","Date","originalMilliseconds","getMilliseconds","originalPerformanceTime","performance","be","milliseconds","seconds","getSeconds","minutes","getMinutes","lineStyle","strokeWidth","stroke","fractate","minuteAngle","secondAngle","iteration","length","transform","concat","style","d","requestAnimationFrame","className","marginLeft","marginRight","height","width","position","viewBox","fill","toConsumableArray","Array","map","nothing","i","rotationInDegrees","key","dominantBaseline","textAnchor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcdc030c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { original } from 'immer';\n\nconst App = props => {\n\n  const [timeyWimeys, setTimeyWimeys] = useState([0, 0, 0]) //[hours, minutes, seconds]\n  const [angleShmangles, setAngleShmangles] = useState([0, 0, 0]) //[hourAngle, minuteAngle, secondAngle]\n  const [lines, setLines] = useState(<g />)\n\n  useEffect(() => {\n    const now = new Date()\n    const originalMilliseconds = now.getMilliseconds()\n    const originalPerformanceTime = performance.now()\n    const be = () => {\n      \n      const milliseconds = originalMilliseconds + originalPerformanceTime + performance.now()\n      const seconds = now.getSeconds() + (milliseconds/1000)\n      const minutes = now.getMinutes() + (seconds / 60)\n      const secondAngle = 360 * seconds / 60\n      const minuteAngle = 360 * minutes / 60\n\n      const lineLength = 75\n      const lineStyle = {strokeWidth: .2, stroke: '#E9E9EC'}\n      const fractate = (minuteAngle, secondAngle, iteration, length) => {\n        if(iteration == 10) return\n        return <g>\n          <g transform={`rotate(${minuteAngle})`}>\n            <path style={lineStyle} d={`M 0,0 L 0,${-length} Z`} />\n            <g transform={`translate(0,${-length})`}>\n              {fractate(minuteAngle, secondAngle, iteration+1, length*0.7)}\n            </g>\n          </g>\n          <g transform={`rotate(${secondAngle})`}>\n            <path style={lineStyle} d={`M 0,0 L 0,${-length} Z`} />\n            <g transform={`translate(0, ${-length})`}>\n              {fractate(minuteAngle, secondAngle, iteration+1, length*0.7)}\n            </g>\n          </g>\n        </g>\n      }\n\n      const lines = fractate(minuteAngle, secondAngle, 1, 75)\n      // console.log(lines)\n      setLines(lines)\n\n      requestAnimationFrame(be)\n    }\n    be(performance.now())\n  }, [])\n  \n  \n  return (\n    <div className=\"App\">\n      <div style={{marginLeft: 'auto', marginRight: 'auto', height: '100%', width: '100%', position: 'absolute'}}>\n        <svg width='600' height='600' viewBox=\"0 0 600 600\">\n          <g transform='translate(300, 300)' style={{stroke: `#E9E9EC`, fill: `#E9E9EC`}}>\n            {/* <path style={{stroke: 'red', strokeWidth: 3}} d='M 0,-100 L 0,-120 Z' /> */}\n            {[...Array(12)].map((nothing, i) => {\n              const rotationFraction = i/12\n              const rotationInDegrees = 360 * rotationFraction\n              return <g transform={`rotate(${rotationInDegrees})`} key={i}>\n                <path style={{strokeWidth: 2}} d='M 0,-100 L 0,-115 Z' />\n                <text transform={`translate(0,-85) rotate(-${rotationInDegrees})`} dominantBaseline=\"middle\" textAnchor=\"middle\">{i || 12}</text>\n              </g>\n            })}\n            {[...Array(60)].map((nothing, i) => {\n              const rotationFraction = i/60\n              const rotationInDegrees = 360 * rotationFraction\n              return <g transform={`rotate(${rotationInDegrees})`} key={i}>\n                <path style={{strokeWidth: 1}} d='M 0,-110 L 0,-115 Z' />\n              </g>\n            })}\n            <g>\n              {lines}\n            </g>\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}